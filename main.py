import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv
import os
from scraper import scrape_chat # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º scraper
import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
chat_history = {}


@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üî•")


@dp.message(Command("history"))
async def show_history(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    last_messages = chat_history.get("messages", [])[-5:]  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π

    if not last_messages:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        return

    history_text = "\n".join([f"{msg['date']} - {msg['text']}" for msg in last_messages])
    await message.answer(f"üï∞ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:\n{history_text}")


async def main():
    global chat_history
    print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await bot.send_message(os.getenv("CHAT_ID"), f"–ö–∞—á–∞—é –¥–∞—Ç—É")
    cur_time = datetime.datetime.now()
    chat_history = await scrape_chat()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.send_message(os.getenv("CHAT_ID"), f"–°–∫–∞—á–∞–ª –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ {cur_time}")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
